# runtime.py (GENERATED BY AI)
import os
import sys
import json
import time
import ctypes
import win32api
import win32con
from datetime import datetime, timedelta
from threading import Thread, Event
from win10toast import ToastNotifier
from core_man import SecureBlockWindow

# Configuration paths
CONFIG_PATH = os.path.join(os.path.expanduser('~'), 'StudyMaster', 'config.json')
BLOCK_KEYS = {win32con.VK_ESCAPE, win32con.VK_LWIN, win32con.VK_RWIN, 
              win32con.VK_TAB, win32con.VK_CONTROL}

class StudyEnforcer:
    def __init__(self):
        self.running = Event()
        self.block_active = False
        self.hook_handle = None
        self.toaster = ToastNotifier()
        self.load_config()
        self.setup_startup()
        
    def load_config(self):
        try:
            with open(CONFIG_PATH, 'r') as f:
                self.config = json.load(f)
        except:
            self.config = {
                "settings": {
                    "scheduled_time": "18:00",
                    "strict_mode": True
                }
            }

    def setup_startup(self):
        """Add to Windows startup registry"""
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
        try:
            reg_key = win32api.RegOpenKeyEx(
                win32con.HKEY_CURRENT_USER, key_path, 0, win32con.KEY_WRITE)
            win32api.RegSetValueEx(reg_key, "StudyMaster", 0, win32con.REG_SZ, 
                                  sys.executable + ' "' + __file__ + '"')
            win32api.RegCloseKey(reg_key)
        except Exception as e:
            pass

    def start(self):
        """Start background monitoring threads"""
        self.running.set()
        
        # Schedule checker thread
        Thread(target=self.schedule_watcher, daemon=True).start()
        
        # Random reminder thread
        Thread(target=self.random_reminders, daemon=True).start()
        
        # Keep main thread alive
        while self.running.is_set():
            time.sleep(1)

    def schedule_watcher(self):
        """Monitor scheduled study times"""
        while self.running.is_set():
            now = datetime.now().time()
            scheduled = datetime.strptime(
                self.config['settings'].get('scheduled_time', '18:00'), 
                "%H:%M"
            ).time()
            
            # Check if current time is within 5 minutes of scheduled time
            if self.time_in_range(scheduled, now, minutes=5):
                print("IN RANGE")
                if not self.has_studied_today():
                    if self.config['settings'].get('strict_mode', True):
                        self.enforce_block()
                    else:
                        self.send_reminder()
            
            time.sleep(1)

    def random_reminders(self):
        """Send random reminders every 60-120 minutes"""
        while self.running.is_set():
            interval = 10
            time.sleep(interval)
            if not self.block_active:
                self.send_reminder()

    def enforce_block(self):
        """Block system access completely"""
        self.block_active = True
        
        # Block user input
        
        # Prevent task manager
        os.system("taskkill /f /im taskmgr.exe")
        
        self.block_window = SecureBlockWindow(self.config)  # Changed from BlockWindow
        self.block_window.showFullScreen()
        # Block for 1 hour
        
        self.block_active = False

    def keyboard_hook_proc(self, nCode, wParam, lParam):
        """Block system keys during punishment"""
        if nCode >= 0:
            vkCode = ctypes.windll.user32.GetKeyState(lParam)
            if vkCode in BLOCK_KEYS:
                return 1
        return ctypes.windll.user32.CallNextHookEx(self.hook_handle, nCode, wParam, lParam)

    def send_reminder(self):
        """Show desktop notification"""
        self.toaster.show_toast(
            "Study Time!",
            "It's time to study!\nOpen StudyMaster to start your session.",
            duration=10,
            threaded=True
        )

    def has_studied_today(self):
        """Check config for today's study progress"""
        today = datetime.now().strftime("%Y-%m-%d")
        return any(entry['Date'] == today and not entry['Skipped'] 
                 for entry in self.config.get('stats', {}).get('progress', []))

    @staticmethod
    def time_in_range(target, current, minutes=5):
        """Check if current time is within X minutes of target"""
        target_dt = datetime.combine(datetime.today(), target)
        current_dt = datetime.combine(datetime.today(), current)
        lower = target_dt - timedelta(minutes=minutes)
        upper = target_dt + timedelta(minutes=minutes)
        return lower <= current_dt <= upper

def hide_console():
    """Hide console window using ctypes"""
    try:
        console_window = ctypes.windll.kernel32.GetConsoleWindow()
        if console_window != 0:
            ctypes.windll.user32.ShowWindow(console_window, 0)  # SW_HIDE = 0
    except Exception as e:
        pass

if __name__ == "__main__":
    hide_console()
    enforcer = StudyEnforcer()
    enforcer.start()